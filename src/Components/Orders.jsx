import React, { useState, useEffect, useContext, useCallback } from 'react';
import { WorldContext } from './WorldContext';
import { faker } from '@faker-js/faker';

export default function Orders({ onCompleteOrder }) {
  // 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const worldContext = useContext(WorldContext);

  // 2. –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä—è–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–µ
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [selectedShip, setSelectedShip] = useState(null);
  const [selectedStaff, setSelectedStaff] = useState([]);
  const [selectedStorage, setSelectedStorage] = useState(null);
  const [isOrderInProgress, setIsOrderInProgress] = useState(false);
  const [progress, setProgress] = useState(0);
  const [timeRemaining, setTimeRemaining] = useState(0);
  const [orders, setOrders] = useState([]);

  // 3. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–æ–≤
  const generateRandomOrder = useCallback(() => ({
    id: faker.string.uuid(),
    level: faker.helpers.arrayElement(['–ü—Ä–æ—Å—Ç–æ–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '–≠–∫—Å–ø–µ—Ä—Ç']),
    from: {
      country: faker.helpers.arrayElement(['USA', 'China', 'Japan', 'Germany', 'Russia', 'Brazil']),
      flag: faker.helpers.arrayElement(['üá∫üá∏', 'üá®üá≥', 'üáØüáµ', 'üá©üá™', 'üá∑üá∫', 'üáßüá∑']),
    },
    to: {
      country: faker.helpers.arrayElement(['USA', 'China', 'Japan', 'Germany', 'Russia', 'Brazil']),
      flag: faker.helpers.arrayElement(['üá∫üá∏', 'üá®üá≥', 'üáØüáµ', 'üá©üá™', 'üá∑üá∫', 'üáßüá∑']),
    },
    cargo: faker.helpers.arrayElement(['–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–¢–µ—Ö–Ω–∏–∫–∞', '–ü—Ä–æ–¥—É–∫—Ç—ã', '–û–¥–µ–∂–¥–∞']),
    payment: faker.number.int({ 
      min: 1000 * (worldContext?.level || 1), 
      max: 10000 * (worldContext?.level || 1) 
    }),
    image: 'https://via.placeholder.com/150',
    requiredStaff: faker.number.int({ min: 1, max: 5 }),
  }), [worldContext?.level]);

  // 4. –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
  useEffect(() => {
    // –ß–∞—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    if (worldContext) {
      setOrders(Array.from({ length: 3 }, generateRandomOrder));
    }

    // –ß–∞—Å—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if (isOrderInProgress) {
      const timer = setInterval(() => {
        setTimeRemaining(prev => {
          if (prev <= 1) {
            clearInterval(timer);
            handleCompleteOrder();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
      return () => clearInterval(timer);
    }

    // –ß–∞—Å—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (selectedOrder) {
      const totalTime = getOrderTime(selectedOrder.level);
      setProgress(((totalTime - timeRemaining) / totalTime) * 100);
    }
  }, [worldContext, generateRandomOrder, isOrderInProgress, timeRemaining, selectedOrder]);

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  if (!worldContext) {
    return <div className="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞</div>;
  }

  // 6. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const { 
    level: currentLevel,
    ships,
    staff,
    storage,
    setBalance,
    setLevel,
    setShips,
    setStaff,
    setStorage
  } = worldContext;

  // 7. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const updateShipStatus = (shipId, purchased) => {
    setShips(prev => prev.map(ship => 
      ship.id === shipId ? { ...ship, purchased } : ship
    ));
  };

  const updateStaffStatus = (staffId, hired) => {
    setStaff(prev => prev.map(person => 
      person.id === staffId ? { ...person, hired } : person
    ));
  };

  const updateStorageStatus = (storageId, purchased) => {
    setStorage(prev => prev.map(store => 
      store.id === storageId ? { ...store, purchased } : store
    ));
  };

  const isPurchased = (items, id) => 
    items.some(item => String(item.id) === String(id) && item.purchased);

  const isHired = (staffId) => 
    staff.some(person => String(person.id) === String(staffId) && person.hired);

  const getOrderTime = (level) => 
    ({ '–ü—Ä–æ—Å—Ç–æ–π': 300, '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 600, '–≠–∫—Å–ø–µ—Ä—Ç': 900 }[level] || 600);

  // 8. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleStartOrder = () => {
    if (!selectedOrder) return;

    const isValid = {
      ship: selectedShip && isPurchased(ships, selectedShip),
      staff: selectedStaff.length >= selectedOrder.requiredStaff && 
             selectedStaff.every(isHired),
      storage: selectedStorage && isPurchased(storage, selectedStorage)
    };

    if (Object.values(isValid).every(Boolean)) {
      setIsOrderInProgress(true);
      setTimeRemaining(getOrderTime(selectedOrder.level));
      
      updateShipStatus(selectedShip, false);
      selectedStaff.forEach(id => updateStaffStatus(id, false));
      updateStorageStatus(selectedStorage, false);
    } else {
      alert(`–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è:
        ${!isValid.ship ? '\n- –ö–æ—Ä–∞–±–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ –∫—É–ø–ª–µ–Ω' : ''}
        ${!isValid.staff ? `\n- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (${selectedStaff.length}/${selectedOrder.requiredStaff})` : ''}
        ${!isValid.storage ? '\n- –°–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ –∫—É–ø–ª–µ–Ω' : ''}
      `);
    }
  };

  const handleCompleteOrder = () => {
    setIsOrderInProgress(false);
    onCompleteOrder(selectedOrder.payment);
    
    updateShipStatus(selectedShip, true);
    selectedStaff.forEach(id => updateStaffStatus(id, true));
    updateStorageStatus(selectedStorage, true);

    const totalSalary = selectedStaff.reduce((sum, id) => {
      const person = staff.find(p => String(p.id) === String(id));
      return sum + (person?.salary || 0) * (1 + currentLevel * 0.1);
    }, 0);

    setBalance(prev => prev - totalSalary);
    setLevel(prev => prev + 1);
    
    setSelectedOrder(null);
    setSelectedShip(null);
    setSelectedStaff([]);
    setSelectedStorage(null);
    setProgress(0);
  };

  // 9. –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  return (
    <div className="container mt-4">
      <h2 className="mb-4">–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã</h2>
      
      <div className="row row-cols-1 row-cols-md-3 g-4 mb-4">
        {orders.map(order => (
          <div key={order.id} className="col">
            <div className="card h-100">
              <img src={order.image} className="card-img-top" alt="–ó–∞–∫–∞–∑" />
              <div className="card-body">
                <h5 className="card-title">–ó–∞–∫–∞–∑ #{order.id.slice(0, 6)}</h5>
                <p className="card-text">
                  <span className="fs-4">{order.from.flag}</span> {order.from.country} ‚Üí 
                  <span className="fs-4">{order.to.flag}</span> {order.to.country}
                </p>
                <p>–ì—Ä—É–∑: {order.cargo}</p>
                <p>–û–ø–ª–∞—Ç–∞: ${order.payment.toLocaleString()}</p>
                <p>–£—Ä–æ–≤–µ–Ω—å: {order.level}</p>
                <p>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {order.requiredStaff}</p>
                <button 
                  className="btn btn-primary w-100"
                  onClick={() => setSelectedOrder(order)}
                >
                  –í—ã–±—Ä–∞—Ç—å
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {selectedOrder && (
        <div className="modal show" style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}>
          <div className="modal-dialog modal-lg">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">–í—ã–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞</h5>
                <button 
                  type="button" 
                  className="btn-close"
                  onClick={() => setSelectedOrder(null)}
                />
              </div>
              
              <div className="modal-body">
                <div className="mb-3">
                  <label className="form-label">–ö–æ—Ä–∞–±–ª–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ: {ships.filter(s => s.purchased).length})</label>
                  <select
                    className="form-select"
                    value={selectedShip || ''}
                    onChange={(e) => setSelectedShip(e.target.value)}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–∞–±–ª—å</option>
                    {ships
                      .filter(ship => ship.purchased)
                      .map(ship => (
                        <option key={ship.id} value={ship.id}>
                          {ship.name} (${ship.price.toLocaleString()})
                        </option>
                      ))}
                  </select>
                </div>

                <div className="mb-3">
                  <label className="form-label">
                    –ü–µ—Ä—Å–æ–Ω–∞–ª (–Ω–∞–Ω—è—Ç–æ: {staff.filter(s => s.hired).length}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {selectedOrder.requiredStaff})
                  </label>
                  <select
                    className="form-select"
                    multiple
                    size={5}
                    value={selectedStaff}
                    onChange={(e) => 
                      setSelectedStaff(
                        Array.from(e.target.selectedOptions, o => o.value)
                      )
                    }
                  >
                    {staff
                      .filter(person => person.hired)
                      .map(person => (
                        <option key={person.id} value={person.id}>
                          {person.name} (${person.salary.toLocaleString()})
                        </option>
                      ))}
                  </select>
                </div>

                <div className="mb-3">
                  <label className="form-label">–°–∫–ª–∞–¥—ã (–¥–æ—Å—Ç—É–ø–Ω–æ: {storage.filter(s => s.purchased).length})</label>
                  <select
                    className="form-select"
                    value={selectedStorage || ''}
                    onChange={(e) => setSelectedStorage(e.target.value)}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥</option>
                    {storage
                      .filter(store => store.purchased)
                      .map(store => (
                        <option key={store.id} value={store.id}>
                          {store.name} (–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {store.capacity})
                        </option>
                      ))}
                  </select>
                </div>
              </div>

              <div className="modal-footer">
                <button 
                  className="btn btn-secondary"
                  onClick={() => setSelectedOrder(null)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button 
                  className="btn btn-primary"
                  onClick={handleStartOrder}
                >
                  –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {isOrderInProgress && (
        <div className="card mt-4">
          <div className="card-body">
            <h5 className="card-title">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h5>
            <div className="progress mb-2">
              <div
                className="progress-bar progress-bar-striped progress-bar-animated"
                style={{ width: `${progress}%` }}
              >
                {progress.toFixed(1)}%
              </div>
            </div>
            <p className="card-text">
              –û—Å—Ç–∞–ª–æ—Å—å: {Math.floor(timeRemaining / 60)}:
              {(timeRemaining % 60).toString().padStart(2, '0')}
            </p>
          </div>
        </div>
      )}
    </div>
  );
}